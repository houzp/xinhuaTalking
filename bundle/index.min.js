"use strict";

/**
 * @Author: St. <SuperWoods>
 * @Date:   2017-01-04-21:39:00
 * @Email:  st_sister@iCloud.com
 * @Filename: index.js
* @Last modified by:   SuperWoods
* @Last modified time: 2017-01-15-19:23:53
 * @License: MIT
 * @Copyright: Copyright (c) Xinhuanet Inc. All rights reserved.
 */
$(function () {
    var SCENES2_SRC = "./bg-scenes2.hyperesources/bgscenes2_hype_generated_script.js";
    var SCENES4_SRC = "./bg-scenes4.hyperesources/bgscenes4_hype_generated_script.js";

    // 判断是否为高性能设备
    console.log('window.BROWSER', window.BROWSER);
    // const IS_IE = $('html').hasClass('ie');
    var IS_NOT_OLDIE = "oldie" !== window.BROWSER.browser && "ie9" !== window.BROWSER.browser;
    var IS_WIN = "windows" === window.BROWSER.device;
    var IS_HIGH_PERFORMANCE = false;
    if (IS_WIN) {
        if ("ie11" === window.BROWSER.browser) {
            IS_HIGH_PERFORMANCE = true;
        }
    } else {
        IS_HIGH_PERFORMANCE = true;
    }

    // const IS_WIN7 = window.BROWSER.UA.indexOf('windows nt 6') ;
    // const IS_NOT_WIN = "windows" !== window.BROWSER.device;

    console.log('IS_HIGH_PERFORMANCE', IS_HIGH_PERFORMANCE);

    // // .no-csstransforms .box { color: red; }
    // // .csstransforms .box { color: green; }
    // // JS
    // if (Modernizr.csstransforms) {
    //     console.log(Modernizr);
    //   // supported
    // } else {
    //   // not-supported
    //   console.log('no', Modernizr.csstransforms);
    // }

    // cover
    if (!IS_NOT_OLDIE) {
        $('.cover-logo').after("\n            <div class=\"hackTips\">\n                <h1 class=\"t1\">Oops\uFF01\u4F3C\u4E4E\u9047\u5230\u4E86\u4E00\u4E9B\u95EE\u9898</h1>\n                <p>\u5982\u679C\u60A8\u80FD\u770B\u5230\u8FD9\u4E2A\u63D0\u793A\uFF0C\u8FD9\u8BF4\u660E\u60A8\u7684\u6D4F\u89C8\u5668\u7248\u672C\u5DF2\u7ECF\u8FC7\u4E8E\u9648\u65E7\uFF0C<br>\n                \u6211\u4EEC\u5EFA\u8BAE\u60A8\u8D76\u7D27\u5347\u7EA7\u4E00\u4E0B\u5979\u4EEC\u5427\uFF1F</p>\n                <div class=\"t2\">\n                    PS: \u516C\u51432015\u5E74\u5FAE\u8F6F\u653E\u5F03\u4E86ie10\u548C\u4EE5\u4E0B\u6D4F\u89C8\u5668\u7684\u5B89\u5168\u66F4\u65B0\uFF0C<br>2016\u5E74\u67D0\u5B9D\u67D0\u732B\u67D0\u67D0\u5DF4\u5DF4\u5DF2\u7ECF\u90FD\u4E0D\u652F\u6301ie8\u30019\u300110\u4E86\uFF01<br>\n                    \u5982\u679C\u60A8\u8FD8\u5728\u7528\u8FD9\u4E9B\u6D4F\u89C8\u5668\u4F1A\u4F7F\u60A8\u7684\u7F51\u7EDC\u5B58\u5728\u6781\u5927\u7684\u5B89\u5168\u98CE\u9669\uFF01\n                </div>\n                <span class=\"t3\">\u4E00\u4E9B\u6709\u7528\u7684\u4FE1\u606F\uFF1A" + window.BROWSER.browser + " + " + window.BROWSER.device + "<br>\n                " + window.BROWSER.UA + "\n                </span>\n            </div>");
    }

    // 必要的全局对象
    var $window = $(window);
    var $body = $('body');
    var $topNav = $('.top-nav');
    var coverStatus = null;
    // main
    var mainSwiper = null;
    var mainSwiperRealIndex = 0;
    // 1
    var scenes1Swiper = null;
    var scenes1SwiperRealIndex = 0;
    var $scenes1 = $('#scenes1');
    var $scenes1Pagination = $scenes1.find('.swiper-pagination');
    var $scenes1SwiperButtonNext = $scenes1.find('.swiper-button-next');
    // const $scenes1SwiperButtonPrev = $scenes1.find('.swiper-button-prev');
    var $scenes1SlideLeft = $scenes1.find('.swiper-slide').find('.scenes-ani-left');
    var $scenes1SlidePic = $scenes1.find('.swiper-slide').find('.scenes1-pic');
    // 2
    var scenes2Swiper = null;
    var $scenes2 = $('#scenes2');
    var $scenes2Slide = $scenes2.find('.swiper-slide');
    // const scenes2SlideLen = $scenes2Slide.length;
    var $scenes2Items = $scenes2.find('.item');
    /* -------------------------------------------------------------------------
     * loader
    ------------------------------------------------------------------------- */
    var resources = [// 需要预加载的资源
    'index-assets/bg.jpg'];
    var loader = new resLoader({
        resources: resources,
        onStart: function onStart(total) {
            // console.log('start:' + total);
            // scenes1Slide1Hide();
            // scenes3Slide1Hide();
            $scenes1.hide();
        },
        onProgress: function onProgress(current, total) {
            // console.log(current + '/' + total);
            // var percent = current / total * 100;
            // $('.progressbar').css('width', percent + '%');
            // $('.progresstext .current').text(current);
            // $('.progresstext .total').text(total);
        },
        onComplete: function onComplete(total) {
            // cover
            if ("oldie" !== window.BROWSER.browser && "ie9" !== window.BROWSER.browser) {
                cover.init();
                // xinhuaTalking
                xinhuaTalking.init();
            }
        }
    });
    /* -------------------------------------------------------------------------
     * cover
    ------------------------------------------------------------------------- */
    var cover = {
        $cover: $('#cover'),
        timeout: null,
        init: function init(_switch) {
            console.log('cover mod:', this.$cover.length);
            if (this.$cover.length && _switch !== 0 && window.location.hash.lastIndexOf('no-cover') < 0) {
                this.coverClear();
                this.coverTimeout();
                this.coverClick();
            } else {
                this.$cover.remove();
                coverStatus = 'hide';
                console.log('coverHide', coverStatus);
            }
        },
        coverClick: function coverClick() {
            var _this = this;
            _this.$cover.on('click', function () {
                TweenMax.killAll();
                _this.coverHide();
                _this.coverClear();
                console.log('click', _this.timeout);
            });
        },
        coverClear: function coverClear() {
            clearTimeout(this.timeout);
            this.timeout = null;
        },
        coverTimeout: function coverTimeout() {
            var _this = this;
            _this.timeout = setTimeout(function () {
                _this.coverHide();
            }, 200);
        },
        coverHide: function coverHide() {
            coverStatus = 'hide';
            console.log('coverHide', coverStatus);
            var _this = this;
            var time = 2.5;
            $body.addClass('overflow-hidden');
            if (IS_HIGH_PERFORMANCE) {
                // anis
                TweenMax.to(_this.$cover.find('.cover-logo'), time, {
                    scale: 8,
                    // opacity: 0,
                    ease: Power4.easeInOut,
                    onStart: function onStart() {
                        TweenMax.to(_this.$cover, time * 1.2, {
                            // scale: 3,
                            opacity: 0,
                            ease: Power4.easeInOut,
                            // delay: 1,
                            // ease: SlowMo.ease.config(0.7, 0.7, false),
                            onStart: function onStart() {
                                _this.$cover.off('click');

                                setTimeout(function () {
                                    if (mainSwiperRealIndex === 0) {
                                        scenes1Slide1Show();
                                    }
                                }, time * 0.5 * 1000);

                                setTimeout(function () {
                                    if (mainSwiperRealIndex === 2) {
                                        scenes3Slide1Show();
                                    }
                                }, time * 0.1 * 1000);
                            },
                            onComplete: function onComplete() {
                                _this.$cover.remove();
                                $body.removeClass('overflow-hidden');
                                // if (mainSwiperRealIndex === 0) {
                                //     scenes1Slide1Show();
                                // }
                            }
                        });
                    }
                });
            } else {

                setTimeout(function () {
                    if (mainSwiperRealIndex === 0) {
                        scenes1Slide1Show();
                    }
                }, time * 0.5 * 1000);

                // setTimeout(function() {
                //     if (mainSwiperRealIndex === 2) {
                //         scenes3Slide1Show(0);
                //     }
                // }, time * 0.1 * 1000);

                _this.$cover.fadeOut('3000');
                $body.removeClass('overflow-hidden');
            }
        }
    };

    /* -------------------------------------------------------------------------
     * zoomHandler
    ------------------------------------------------------------------------- */

    var zoomHandler = {
        zoomSets: function zoomSets() {
            if ($window.height() < 1080) {
                var _this = this;
                $('#scenes2').addClass('ctlHeight');
            } else {
                $('#scenes2').removeClass('ctlHeight');
                // $('.scenes2-top-text').css({
                //     'margin-top': 20,
                //     'font-size': '20px',
                //     'line-height': '28px'
                // });
            }
        },
        init: function init() {
            console.log('init zoom');
            var _this = this;
            $window.on('resize', function () {
                _this.zoomSets();
            });
            _this.zoomSets();
        }
    };

    /* -------------------------------------------------------------------------
     * scenes1Slide1
    ------------------------------------------------------------------------- */
    var scenes1Slide1Ani = function scenes1Slide1Ani(swiperRealIndex) {
        if (coverStatus === 'hide' && swiperRealIndex === 0) {
            scenes1Slide1Show();
        } else {
            scenes1Slide1Hide();
        }
    };
    var scenes1Slide1Hide = function scenes1Slide1Hide() {
        TweenMax.to($topNav, 0, {
            y: 200,
            opacity: 0
        });
        TweenMax.to($scenes1Pagination, 0, {
            y: -200,
            opacity: 0
        });
        TweenMax.to($scenes1SlideLeft, 0, {
            x: 200,
            opacity: 0
        });
        TweenMax.to($scenes1SlidePic, 0, {
            x: -200,
            opacity: 0
        });
        // $scenes1SwiperButtonNext.removeClass('active');
    };
    var scenes1Slide1Show = function scenes1Slide1Show() {
        TweenMax.to($topNav, 2, {
            y: 0,
            opacity: 1,
            ease: Power0.ease
        });
        TweenMax.to($scenes1Pagination, 2.5, {
            y: 0,
            opacity: 1,
            ease: Power0.ease
        });
        TweenMax.to($scenes1SlideLeft, 2.5, {
            x: 0,
            opacity: 1,
            ease: Power0.ease
        });
        TweenMax.to($scenes1SlidePic, 2, {
            x: 0,
            opacity: 1,
            ease: Power0.ease
        });
    };
    /* -------------------------------------------------------------------------
     * scenes2
    ------------------------------------------------------------------------- */
    var scenes2Ani = function scenes2Ani(num, toggle) {
        console.log('scenes2Ani:', num, toggle);
        if (toggle === 'show') {
            if (IS_HIGH_PERFORMANCE) {
                $scenes2Slide.eq(num).find('.item').each(function (i, e) {
                    TweenMax.to($(e), 0.4, {
                        x: 0,
                        opacity: 1,
                        delay: i * 0.1
                    });
                });
            } else {
                // TweenMax.to($scenes2Slide.find('.item'), 0.4, {
                //     x: 0,
                //     opacity: 1,
                //     delay: i * 0.1
                // });
            }
        } else if (toggle === 'hide') {
            if (IS_HIGH_PERFORMANCE) {
                $scenes2Slide.eq(num).find('.item').each(function (i, e) {
                    scenes2Hide($(e), 0.4, i * 0.08);
                });
            }
        }
    };
    var scenes2Hide = function scenes2Hide(tag, time, delay) {
        if (IS_HIGH_PERFORMANCE) {
            TweenMax.to(tag, time, {
                x: 30,
                opacity: 0,
                delay: delay
            });
        }
    };
    var scenes2Mouseover = function scenes2Mouseover($tag) {

        console.log('scenes2Mouseover', $tag);

        TweenMax.to($tag, 0.2, {
            scale: 1.25,
            'box-shadow': '6px 6px 32px rgba(0, 0, 0, 0.35)',
            onStart: function onStart() {
                $tag.css({
                    'z-index': 2
                });
                // $tag.find('img').css({
                //     width: '-=1px',
                //     height: '-=1px',
                //     'border': '1px #FFF solid',
                // });
                TweenMax.to($tag.find('.mask'), 0.8, {
                    opacity: 0
                });
            },
            onComplete: function onComplete() {
                scenes2SetTitles($tag);
            }
        });
    };
    var $scenes2TitleBox = $('#scenes2-title-box');
    var scenes2SetTitles = function scenes2SetTitles($tag) {

        console.log('scenes2SetTitles', $tag);

        var t1 = $tag.find('.t1').html();
        var t2 = $tag.find('.t2').html();
        var t3 = $tag.find('.t3').html();
        var t3Href = $tag.find('.t3').find('a').attr('href');

        $tag.on('click', function () {
            window.open(t3Href, '_blank');
        });

        if (t1 === 'undefined') {
            t1 = '';
        }

        if (t2 === 'undefined') {
            t2 = '';
        }

        if (t3 === 'undefined') {
            t3 = '';
        }

        $scenes2TitleBox.stop(false, true).fadeOut('2000', function () {
            $(this).html("\n                <div class=\"t2 title-2\">" + t2 + "</div>\n                <div class=\"t3 title-3\">" + t3 + "</div>\n                <div class=\"t1 title-1\">" + t1 + "</div>").fadeIn('2000');
        });
    };
    var scenes2Mouseout = function scenes2Mouseout($tag, time) {
        // if (IS_HIGH_PERFORMANCE) {
        TweenMax.to($tag, 1.2, {
            scale: 1,
            'box-shadow': 'none',
            onStart: function onStart() {
                TweenMax.to($tag.find('.mask'), 1.2, {
                    opacity: 1
                });
                $tag.css({
                    'z-index': 1
                });
                // $tag.find('img').css({
                //     width: '100%',
                //     height: '100%',
                //     'border': 'none',
                // });
            }
        });
        // }
    };
    var scenes2Init = function scenes2Init(num) {
        console.log(num, num === 1);
        if (num === 1) {
            if (scenes2Swiper === null) {
                scenes2Swiper = new Swiper('#scenes2', {
                    lazyLoading: true,
                    effect: 'fade',
                    // autoplay: 8000,
                    // loop: true, // 因为背景透明无法使用loop
                    prevButton: '#scenes2 .swiper-button-prev',
                    nextButton: '#scenes2 .swiper-button-next',
                    paginationClickable: true,
                    speed: 1800,
                    // spaceBetween: 200,
                    onInit: function onInit(swiper) {
                        IS_HIGH_PERFORMANCE && $.getScript(SCENES2_SRC);

                        scenes2Hide($scenes2Items, 0, 0);
                        scenes2Ani(swiper.activeIndex, 'show', 1);

                        var firstNum = 0;
                        var $firstItem = $scenes2Items.eq(firstNum);
                        setTimeout(function () {
                            scenes2Mouseover($firstItem);
                        }, 2500);
                        $scenes2Items.on('mouseover', function () {
                            var $this = $(this);
                            if ($this.index() !== firstNum) {
                                scenes2Mouseout($firstItem);
                            }
                            scenes2Mouseover($this);
                        });
                        $scenes2Items.on('mouseout', function () {
                            var $this = $(this);
                            scenes2Mouseout($this);
                        });

                        $('#scenes2').find('.swiper-slide').css({
                            'z-index': 8888
                        });
                        $('#scenes2').find('.swiper-slide').eq(swiper.activeIndex).css({
                            'z-index': 9999
                        });

                        zoomHandler.init();
                    },
                    onSlideChangeStart: function onSlideChangeStart(swiper) {
                        scenes2Ani(swiper.activeIndex, 'show');
                        scenes2Ani(swiper.previousIndex, 'hide');

                        $('#scenes2').find('.swiper-slide').css({
                            'z-index': 8888
                        });
                        $('#scenes2').find('.swiper-slide').eq(swiper.activeIndex).css({
                            'z-index': 9999
                        });
                    }
                });
            } else {
                scenes2Swiper.unlockSwipes();
                scenes2Ani(scenes2Swiper.activeIndex, 'show');
            }
        } else {
            if (scenes2Swiper !== null) {
                scenes2Swiper.lockSwipes();
                scenes2Hide($scenes2Items, 0, 0);
            }
        }
    };
    /* -------------------------------------------------------------------------
     * scenes3
    ------------------------------------------------------------------------- */
    // 3
    var scenes3Bg = null;
    var scenes3Swiper = null;
    var scenes3SwiperIns = new Array();
    var scenes3Data = new Array();
    var $scenes3 = $('#scenes3');
    var $scenes3InSlide = $scenes3.find('.scenes3-container-in .swiper-slide');
    var scenes3Init = function scenes3Init(swiperRealIndex) {
        // if (IS_HIGH_PERFORMANCE) {
        //     scenes3Slide1Ani(mainSwiperRealIndex);
        // }
        if (mainSwiperRealIndex === 2) {
            if (scenes3Swiper === null) {
                scenes3Btn();
                // IS_HIGH_PERFORMANCE && triangleBgInit(mainSwiperRealIndex, 2);

                scenes3Swiper = new Swiper($scenes3.selector, {
                    lazyLoading: true,
                    // autoplay: 12000,
                    // parallax: true,
                    pagination: '#scenes3-pagination',
                    prevButton: '#scenes3-prev',
                    nextButton: '#scenes3-next',
                    // paginationClickable: true,
                    speed: IS_HIGH_PERFORMANCE && 3000 || 0,
                    // runCallbacksOnInit: true,
                    onInit: function onInit(swiper) {
                        scenes3GetSwiperData();
                        scenes3BtnUpdate(swiper);

                        // if (mainSwiperRealIndex === 2) {
                        // scenes3Slide1Show(0);
                        if (!IS_HIGH_PERFORMANCE && scenes3SwiperIns[0] === undefined) {
                            scenes3SwiperIns[0] = scenes3SwiperInInit(0);
                        }
                        // }

                        swiper.nextButton.on('click', function () {
                            console.log('scenes3SwiperInInit', scenes3SwiperIns, swiper.realIndex);
                            if (scenes3SwiperIns[swiper.realIndex] === undefined) {
                                scenes3SwiperIns[swiper.realIndex] = scenes3SwiperInInit(swiper.realIndex);
                            }
                        });
                    },
                    onSlideChangeStart: function onSlideChangeStart(swiper) {
                        scenes3BtnUpdate(swiper);
                        // scenes3BtnHide(swiper.slides.eq(swiper.realIndex).find('.swiper-slide:eq(0)'));
                    },
                    onSlideChangeEnd: function onSlideChangeEnd(swiper) {
                        scenes3BtnShow(swiper.slides.eq(swiper.realIndex).find('.swiper-slide:eq(0)'));
                    }
                });
            } else {
                scenes3Swiper.unlockSwipes();
            }

            if (scenes3SwiperIns[0] === undefined) {
                scenes3SwiperIns[0] = scenes3SwiperInInit(0);
            }

            // bgToggle('show');
            // if (coverStatus === 'hide') {
            //     scenes3Slide1Show();
            // }
        } else {
            if (scenes3Swiper !== null) {
                scenes3Swiper.lockSwipes();
            }
            // bgToggle('hide');
        }
    };
    var scenes3BtnUpdate = function scenes3BtnUpdate(swiper) {
        var num = [swiper.realIndex - 1, swiper.realIndex + 1];
        if (num[0] < 0) {
            num[0] = scenes3Data.length - 1;
        }
        if (num[1] >= scenes3Data.length) {
            num[1] = 0;
        }
        scenes3SetSwiperButton(swiper.prevButton, num[0]);
        scenes3SetSwiperButton(swiper.nextButton, num[1]);
    };
    var scenes3Btn = function scenes3Btn() {
        $scenes3InSlide.on('mouseover mouseout', function (e) {
            var $this = $(this);
            if (e.type === 'mouseover') {
                // $this.addClass('active').siblings().removeClass('active');
                scenes3BtnHide($this.siblings());
                scenes3BtnShow($this);
            } else if (e.type === 'mouseout') {
                scenes3BtnHide($this);
                // $this.removeClass('active');
            }
        });
    };
    var scenes3BtnHide = function scenes3BtnHide($this) {
        $this.removeClass('active');
    };
    var scenes3BtnShow = function scenes3BtnShow($this) {
        $this.addClass('active');
    };
    var scenes3GetSwiperData = function scenes3GetSwiperData() {
        $scenes3.find('.scenes3-container-in').each(function (i, e) {
            var $e = $(e);
            scenes3Data.push({
                title: "\n                        " + $.trim($e.find('.t1').text()) + "\n                        <div class=\"a\">\n                            " + $.trim($e.find('.t2').text()) + "\n                        </div>",
                img: $.trim($e.find('.t3').attr('src'))
            });
        });
    };
    var scenes3SetSwiperButton = function scenes3SetSwiperButton($tag, num) {
        $tag.html("\n                <div class=\"swiper-button-content\">\n                    <div class=\"p\">\n                        <img src=\"" + scenes3Data[num].img + "\" width=\"auto\" height=\"102\">\n                    </div>\n                    <div class=\"t\">" + scenes3Data[num].title + "</div>\n                </div>\n                <div class=\"icon\"></div>\n                <div class=\"b\"></div>");
    };

    var scenes3SwiperInInit = function scenes3SwiperInInit(num) {
        new Swiper('#scenes3-in' + num, {
            lazyLoading: true,
            // autoplay: 12000,
            // parallax: true,
            // pagination: $scenes3In.selector + ' .swiper-pagination',
            // prevButton: '#scenes3-in-prev' + num,
            // nextButton: '#scenes3-in-next' + num,
            paginationClickable: true,
            // speed: 3000,
            slidesPerView: 5,
            slidesPerGroup: 5,
            spaceBetween: 30,
            // centeredSlides : true,
            // runCallbacksOnInit: true,
            nested: true, // 不能使用loop: true
            // resistanceRatio: 0,
            onInit: function onInit(swiper) {
                num === 0 && scenes3BtnShow(swiper.slides.eq(0));
                var $nextBtn = $('#scenes3-in-next' + num);
                var $prevBtn = $('#scenes3-in-prev' + num);

                // $nextBtn.css({
                //     'opacity': 1,
                //     'pointer-events': 'visible',
                //     'cursor': 'pointer',
                // })

                console.log(num, scenes3SwiperIns[num + 1] === undefined);
                // nextBtn
                $nextBtn.off('click');
                $nextBtn.on('click', function () {
                    swiper.slideNext();
                    if ($prevBtn.attr('data-click') === 'scenes3Swiper_Prev') {
                        $prevBtn.off('click');
                        $prevBtn.on('click', function () {
                            swiper.slidePrev();
                            if (swiper.isBeginning) {
                                $(this).off('click').attr('data-click', 'scenes3Swiper_Prev');
                                $(this).click(function () {
                                    scenes3Swiper.slidePrev();
                                });
                            }
                        });
                    }
                    if (swiper.isEnd) {
                        $(this).off('click').attr('data-click', 'scenes3Swiper_Next');
                        $(this).click(function () {
                            if (scenes3SwiperIns[num + 1] === undefined) {
                                scenes3SwiperIns[num + 1] = scenes3SwiperInInit(num + 1);
                            }
                            scenes3Swiper.slideNext();
                            // $(this).off('click');
                        });
                    }
                });

                // prevBtn
                $prevBtn.off('click');
                $prevBtn.on('click', function () {
                    swiper.slidePrev();
                    if ($nextBtn.attr('data-click') === 'scenes3Swiper_Next') {
                        $nextBtn.off('click');
                        $nextBtn.on('click', function () {
                            swiper.slideNext();
                            if (swiper.isEnd) {
                                $(this).off('click').attr('data-click', 'scenes3Swiper_Next');
                                $(this).click(function () {
                                    if (scenes3SwiperIns[num + 1] === undefined) {
                                        scenes3SwiperIns[num + 1] = scenes3SwiperInInit(num + 1);
                                    }
                                    scenes3Swiper.slideNext();
                                });
                            }
                        });
                    }
                    if (swiper.isBeginning) {
                        $(this).off('click').attr('data-click', 'scenes3Swiper_Prev');
                        $(this).click(function () {
                            scenes3Swiper.slidePrev();
                        });
                    }
                });
            }
        });
    };
    /* -------------------------------------------------------------------------
     * scenes3Page1
    ------------------------------------------------------------------------- */
    var $scenes3Slide1 = $scenes3.find('.swiper-slide:eq(0)');
    var $scenes3Slide1Title = $scenes3Slide1.find('.scenes3-title');
    var $scenes3Slide1Abs = $scenes3Slide1.find('.scenes3-absract');
    var $scenes3Slide1Cont = $scenes3Slide1.find('.swiper-container');
    var scenes3Slide1Ani = function scenes3Slide1Ani(swiperRealIndex) {
        if (coverStatus === 'hide' && swiperRealIndex === 2) {
            scenes3Slide1Show();
        } else {
            scenes3Slide1Hide();
        }
    };
    var scenes3Slide1Hide = function scenes3Slide1Hide() {
        TweenMax.to($scenes3Slide1Title, 0, {
            y: 200,
            opacity: 0
        });
        TweenMax.to($scenes3Slide1Abs, 0, {
            y: 200,
            opacity: 0
        });
        TweenMax.to($scenes3Slide1Cont, 0, {
            y: -100,
            opacity: 0
        });
        // if (triangleBg !== null) {
        triangleBgHide();
        // }
    };
    var scenes3Slide1Show = function scenes3Slide1Show(time) {
        // if (scenes3SwiperIns[0] === undefined) {
        //     scenes3SwiperIns[0] = scenes3SwiperInInit(0);
        // }
        TweenMax.to($scenes3Slide1Title, time || 2.2, {
            y: 0,
            opacity: 1,
            ease: Power0.ease,
            onComplete: function onComplete() {
                if (scenes3SwiperIns[0] === undefined) {
                    scenes3SwiperIns[0] = scenes3SwiperInInit(0);
                }
            }
        });
        TweenMax.to($scenes3Slide1Abs, 1.4, {
            y: 0,
            opacity: 1,
            ease: Power0.ease
        });
        TweenMax.to($scenes3Slide1Cont, 2, {
            y: 0,
            opacity: 1,
            ease: Power0.ease
        });
        triangleBgShow();
    };
    /* -------------------------------------------------------------------------
     * scenes4
    ------------------------------------------------------------------------- */

    // console.log(Modernizr);

    // 4
    var scenes4Bg = null;
    var scenes4BgInit = function scenes4BgInit(swiperRealIndex) {
        if (scenes4Bg === null) {
            scenes4Bg = $.getScript(SCENES4_SRC);
        }
    };
    var scenes4Init = function scenes4Init(swiperRealIndex) {
        if (mainSwiperRealIndex === 3 && IS_HIGH_PERFORMANCE) {
            scenes4BgInit(swiperRealIndex);
        }
    };
    /* -------------------------------------------------------------------------
     * nav
    ------------------------------------------------------------------------- */
    var $nav = $('#nav');
    var $navLine = $nav.find('.nav-line');
    var $navA = $nav.find('.nav-btn-box a');
    $navA.on('mouseover', function () {
        navLine($(this).index() - 1, 0.3);
    });
    var navLine = function navLine(index, time) {
        // if (IS_HIGH_PERFORMANCE) {
        TweenMax.to($navLine, time, {
            x: index * (100 + 20)
        });
        // }
    };
    // nav按钮点击事件
    $navA.on('click', function (e) {
        e.preventDefault();
        // console.log($(this).index()-1);
        mainSwiper.slideTo($(this).index() - 1);
        return false;
    });
    /* -------------------------------------------------------------------------
     * triangleBg
    ------------------------------------------------------------------------- */
    var triangleBg = null;
    var $triangleBg = null;
    var triangleBgHide = function triangleBgHide() {
        if (triangleBg !== null) {
            console.log('triangleBgHide');
            TweenMax.to($triangleBg, 0, {
                opacity: 0
            });
        }
    };
    var triangleBgShow = function triangleBgShow() {
        if (triangleBg !== null) {
            console.log('triangleBgShow');
            TweenMax.to($triangleBg, 3, {
                opacity: 0.2,
                onStart: function onStart() {
                    $('.scenes3').css({
                        background: 'none'
                    });
                }
            });
        }
    };
    var triangleBgHandler = function triangleBgHandler() {
        console.log('is cav');
        var $triangleBg = $("#triangleBg");
        var $triangleBgAnitOut = $("#triangleBg-anitOut");
        if (!!document.createElement("canvas").getContext) {
            var t;
            var G;
            var m;
            var E;
            var x;
            var i, n;
            var L;
            var k;
            var z;
            var w;
            var D, I, h, q, y;
            var g;
            var r;

            (function () {
                var C = function C() {
                    F();
                    p();
                    s();
                    B();
                    v();
                    K(z.offsetWidth, z.offsetHeight);
                    o();
                };

                var F = function F() {
                    g = new CAV.CanvasRenderer();
                    H(x.renderer);
                };

                var H = function H(N) {
                    if (D) {
                        w.removeChild(D.element);
                    }
                    switch (N) {
                        case m:
                            D = g;
                            break;
                    }
                    D.setSize(z.offsetWidth, z.offsetHeight);
                    w.appendChild(D.element);
                };

                var p = function p() {
                    I = new CAV.Scene();
                };

                var s = function s() {
                    I.remove(h);
                    D.clear();
                    q = new CAV.Plane(t.width * D.width, t.height * D.height, t.segments, t.slices);
                    y = new CAV.Material(t.ambient, t.diffuse);
                    h = new CAV.Mesh(q, y);
                    I.add(h);
                    var N, O;
                    for (N = q.vertices.length - 1; N >= 0; N--) {
                        O = q.vertices[N];
                        O.anchor = CAV.Vector3.clone(O.position);
                        O.step = CAV.Vector3.create(Math.randomInRange(0.2, 1), Math.randomInRange(0.2, 1), Math.randomInRange(0.2, 1));
                        O.time = Math.randomInRange(0, Math.PIM2);
                    }
                };

                var B = function B() {
                    var O, N;
                    for (O = I.lights.length - 1; O >= 0; O--) {
                        N = I.lights[O];
                        I.remove(N);
                    }
                    D.clear();
                    for (O = 0; O < G.count; O++) {
                        N = new CAV.Light(G.ambient, G.diffuse);
                        N.ambientHex = N.ambient.format();
                        N.diffuseHex = N.diffuse.format();
                        I.add(N);
                        N.mass = Math.randomInRange(0.5, 1);
                        N.velocity = CAV.Vector3.create();
                        N.acceleration = CAV.Vector3.create();
                        N.force = CAV.Vector3.create();
                    }
                };

                var K = function K(O, N) {
                    D.setSize(O, N);
                    CAV.Vector3.set(L, D.halfWidth, D.halfHeight);
                    s();
                };

                var o = function o() {
                    i = Date.now() - n;
                    u();
                    M();
                    requestAnimationFrame(o);
                };

                var u = function u() {
                    var Q,
                        P,
                        O,
                        R,
                        T,
                        V,
                        U,
                        S = t.depth / 2;
                    CAV.Vector3.copy(G.bounds, L);
                    CAV.Vector3.multiplyScalar(G.bounds, G.xyScalar);
                    CAV.Vector3.setZ(k, G.zOffset);
                    for (R = I.lights.length - 1; R >= 0; R--) {
                        T = I.lights[R];
                        CAV.Vector3.setZ(T.position, G.zOffset);
                        var N = Math.clamp(CAV.Vector3.distanceSquared(T.position, k), G.minDistance, G.maxDistance);
                        var W = G.gravity * T.mass / N;
                        CAV.Vector3.subtractVectors(T.force, k, T.position);
                        CAV.Vector3.normalise(T.force);
                        CAV.Vector3.multiplyScalar(T.force, W);
                        CAV.Vector3.set(T.acceleration);
                        CAV.Vector3.add(T.acceleration, T.force);
                        CAV.Vector3.add(T.velocity, T.acceleration);
                        CAV.Vector3.multiplyScalar(T.velocity, G.dampening);
                        CAV.Vector3.limit(T.velocity, G.minLimit, G.maxLimit);
                        CAV.Vector3.add(T.position, T.velocity);
                    }
                    for (V = q.vertices.length - 1; V >= 0; V--) {
                        U = q.vertices[V];
                        Q = Math.sin(U.time + U.step[0] * i * t.speed);
                        P = Math.cos(U.time + U.step[1] * i * t.speed);
                        O = Math.sin(U.time + U.step[2] * i * t.speed);
                        CAV.Vector3.set(U.position, t.xRange * q.segmentWidth * Q, t.yRange * q.sliceHeight * P, t.zRange * S * O - S);
                        CAV.Vector3.add(U.position, U.anchor);
                    }
                    q.dirty = true;
                };

                var M = function M() {
                    D.render(I);
                };

                var J = function J(O) {
                    var Q,
                        N,
                        S = O;
                    var P = function P(T) {
                        for (Q = 0, l = I.lights.length; Q < l; Q++) {
                            N = I.lights[Q];
                            N.ambient.set(T);
                            N.ambientHex = N.ambient.format();
                        }
                    };
                    var R = function R(T) {
                        for (Q = 0, l = I.lights.length; Q < l; Q++) {
                            N = I.lights[Q];
                            N.diffuse.set(T);
                            N.diffuseHex = N.diffuse.format();
                        }
                    };
                    return {
                        set: function set() {
                            P(S[0]);
                            R(S[1]);
                        }
                    };
                };

                var v = function v() {
                    window.addEventListener("resize", j);
                };

                var A = function A(N) {
                    CAV.Vector3.set(k, N.x, D.height - N.y);
                    CAV.Vector3.subtract(k, L);
                };

                var j = function j(N) {
                    K(z.offsetWidth, z.offsetHeight);
                    M();
                };

                // $.getScript("/lib/triangleBg/cav.min.js", function(){})
                // function() {
                t = {
                    width: 0.8,
                    height: 1,
                    depth: 40,
                    segments: 5,
                    slices: 0,
                    xRange: 0.5,
                    yRange: 0.2,
                    zRange: 1,
                    ambient: "#444444",
                    diffuse: "#FFFFFF",
                    speed: 0.0003
                };
                G = {
                    count: 2,
                    xyScalar: 1,
                    zOffset: 100,
                    ambient: "#FFFFFF",
                    diffuse: "#FFFFFF",
                    speed: 0.001,
                    gravity: 1200,
                    dampening: 0.95,
                    minLimit: 10,
                    maxLimit: 1,
                    minDistance: 20,
                    maxDistance: 400,
                    autopilot: false,
                    draw: false,
                    bounds: CAV.Vector3.create(),
                    step: CAV.Vector3.create(Math.randomInRange(0.2, 1), Math.randomInRange(0.2, 1), Math.randomInRange(0.2, 1))
                };
                m = "canvas";
                E = "svg";
                x = {
                    renderer: m
                };
                n = Date.now();
                L = CAV.Vector3.create();
                k = CAV.Vector3.create();
                z = $triangleBg[0];
                w = $triangleBgAnitOut[0];

                C();
                // }
            })();
        } else {
            $triangleBg.remove();
        }
    };

    var triangleBgInit = function triangleBgInit(swiperRealIndex, num) {
        if (swiperRealIndex === num && triangleBg === null) {
            $triangleBg = $('#triangleBg');
            // triangleBg = $.getScript("lib/triangleBg/triangleBg.js", function() {
            //     triangleBgShow();
            // });
            triangleBg = triangleBgHandler();
            triangleBgShow();
            // triangleBgHide();
        }
    };

    var scense5Fn = null;
    var scenes5Init = function scenes5Init(num) {
        if (scense5Fn === null && num === 4) {
            (function () {
                // scense_five();
                var setFooter = function setFooter() {
                    if ($window.height() < 900) {
                        $('.footer').css({
                            'bottom': -80
                        });
                    } else {
                        $('.footer').css({
                            'bottom': 0
                        });
                    }
                };

                scense5Fn = scense_five();
                $window.on('resize', function () {
                    setFooter();
                });
                setFooter();
            })();
        }
    };

    /* -------------------------------------------------------------------------
     * xinhuaTalking
    ------------------------------------------------------------------------- */
    var isScroll = function isScroll() {
        var condition = window.location.hash === '#no-scroll';
        var temp = void 0;
        if (condition) {
            temp = false;
        } else {
            temp = true;
        }
        return temp;
    };

    var xinhuaTalking = {
        $nav: $nav,
        navHeight: 67,
        // scenesMain_realIndex: 0,
        $scenes1: $scenes1,
        scenes1: null,
        init: function init() {
            var _this = this;
            // swiper
            mainSwiper = new Swiper('#main', {
                lazyLoading: true,
                speed: IS_HIGH_PERFORMANCE && 2000 || 500,
                // hashnav: true, // for dev
                hashnavWatchState: true,
                direction: 'vertical',
                keyboardControl: true,
                runCallbacksOnInit: true, // 必须开启，onInit触发回调
                mousewheelControl: isScroll(),
                // mousewheelSensitivity : 1,
                onInit: function onInit(swiper) {
                    // getSize
                    _this.getSize();
                    // nav
                    _this.navHeight = _this.$nav.height();
                    // navLine(swiper.realIndex, 1);
                    $window.on('resize', function () {
                        if (mainSwiperRealIndex < 1) {
                            _this.getSize();
                        }
                        _this.navSetPosition(mainSwiperRealIndex);
                    });
                    _this.scenes1Init(swiper.realIndex);
                },
                onSlideChangeStart: function onSlideChangeStart(swiper) {
                    mainSwiperRealIndex = swiper.realIndex;
                    _this.navSetPosition(swiper.realIndex);
                    scenes2Init(swiper.realIndex);

                    scenes5Init(swiper.realIndex);
                },
                onSlideChangeEnd: function onSlideChangeEnd(swiper) {
                    navLine(swiper.realIndex, 1);
                    // scenes1Init
                    _this.scenes1Init(swiper.realIndex);
                    scenes3Init(swiper.realIndex);
                    scenes4Init(swiper.realIndex);
                }
            });
        },
        scenes1Init: function scenes1Init(num) {
            $scenes1.show();
            var _this = this;
            if (IS_HIGH_PERFORMANCE) {
                scenes1Slide1Ani(num);
            }
            if (num === 0) {
                _this.zoom();
                if (scenes1Swiper === null) {
                    console.log('scenes1Init start');
                    scenes1Swiper = new Swiper('#scenes1', {
                        spaceBetween: 200,
                        lazyLoading: true,
                        // autoplay: 12000,
                        parallax: IS_HIGH_PERFORMANCE ? true : false,
                        // parallax: true,
                        pagination: '#scenes1-pagination',
                        prevButton: '#scenes1-prev',
                        nextButton: '#scenes1-next',
                        paginationClickable: true,
                        speed: IS_HIGH_PERFORMANCE ? 3000 : 1100,
                        // effect : (IS_HIGH_PERFORMANCE) ? 'slide' : 'fade',
                        // fade: {
                        //   crossFade: false,
                        // },
                        runCallbacksOnInit: true,
                        onInit: function onInit(swiper) {

                            scense_one_video_mask();

                            // getSwiperData
                            _this.getSwiperData();
                            _this.qrcode();
                            // 图片盒子 hover
                            $scenes1SlidePic.on('mouseover', function () {
                                TweenMax.to($(this), 0.8, {
                                    x: 30
                                });
                            }).on('mouseout', function () {
                                TweenMax.to($(this), 0.8, {
                                    x: 0
                                });
                            });
                            // swiper.nextButton
                            //     .addClass('active')
                            //     .on('mouseout', function () {
                            //         $(this).removeClass('active');
                            //     });
                            // 按钮移除 active
                            swiper.nextButton.on('mouseout', function () {
                                swiper.nextButton.removeClass('active');
                            });
                            swiper.prevButton.on('mouseover', function () {
                                swiper.nextButton.removeClass('active');
                            });
                            var num = [swiper.realIndex - 1, swiper.realIndex + 1];
                            if (num[0] < 0) {
                                num[0] = _this.data.length - 1;
                            }
                            if (num[1] >= _this.data.length) {
                                num[1] = 0;
                            }
                            _this.setSwiperButton(swiper.prevButton, num[0]);
                            _this.setSwiperButton(swiper.nextButton, num[1]);
                        },
                        onSlideChangeStart: function onSlideChangeStart(swiper) {
                            var num = [swiper.realIndex - 1, swiper.realIndex + 1];
                            if (num[0] < 0) {
                                num[0] = _this.data.length - 1;
                            }
                            if (num[1] >= _this.data.length) {
                                num[1] = 0;
                            }
                            _this.setSwiperButton(swiper.prevButton, num[0]);
                            _this.setSwiperButton(swiper.nextButton, num[1]);
                        }
                    });
                } else {
                    scenes1Swiper.unlockSwipes();
                }
                // if (coverStatus === 'hide') {
                //     scenes1Slide1Show();
                // }
            } else {
                if (scenes1Swiper !== null) {
                    scenes1Swiper.lockSwipes();
                }
                // if (coverStatus === 'hide') {
                //     scenes1Slide1Hide();
                // }
            }
        },
        getSwiperData: function getSwiperData() {
            var _this = this;
            _this.data = new Array();
            $scenes1.find('.swiper-slide').each(function (i, e) {
                var $e = $(e);
                _this.data.push({
                    title: $.trim($e.find('.scenes1-title-1').text()),
                    img: $e.find('.scenes1-pic img').attr('src')
                });
            });
            console.log(_this.data);
        },
        setSwiperButton: function setSwiperButton($tag, num) {
            var _this = this;
            $tag.html("\n                    <div class=\"swiper-button-content\">\n                        <div class=\"p\">\n                            <img src=\"" + _this.data[num].img + "\" width=\"102\" height=\"auto\">\n                        </div>\n                        <div class=\"t\">" + _this.data[num].title + "</div>\n                    </div>\n                    <div class=\"icon\"></div>\n                    <div class=\"b\"></div>");
        },
        getSize: function getSize() {
            this.size = {
                height: $window.height(),
                width: $window.width()
            };
        },
        qrcode: function qrcode() {
            var qrcodes = $scenes1.find('.scenes1-qrcode');
            qrcodes.each(function (i, e) {
                var $e = $(e);
                $e.qrcode({
                    correctLevel: 1,
                    // background: "#999",
                    foreground: "#333", //"#0099ff"
                    width: 108,
                    height: 108,
                    text: $.trim($e.find('.scenes1-qrcode-url').text())
                });
            });
        },
        zoomTags: [{
            tag: '.scenes1-logo'
        }, {
            tag: '.scenes1-title-top'
        }, {
            tag: '.scenes1-title-1'
        }, {
            tag: '.scenes1-title-4'
        }, {
            tag: '.scenes1-content'
        }],
        zoomResize: null,
        zoomRatio: function zoomRatio(num) {
            return Math.round(num * this.size.height / 1080);
        },
        zoomSet: function zoomSet(opt) {
            var _this = this;
            var css = {
                top: _this.zoomRatio(opt.num)
            };
            if (opt.type === 'height') {
                css = {
                    height: _this.zoomRatio(opt.num)
                };
            }
            opt.tag.css(css);
        },
        zoomSets: function zoomSets() {
            console.log('zoomSets');
            this.getSize();
            for (var i = 0, j = this.zoomTags.length; i < j; i++) {
                if (!this.zoomTags[i].num) {
                    this.zoomTags[i].tag = this.$scenes1.find(this.zoomTags[i].tag);
                    if (this.zoomTags[i].type !== 'height') {
                        this.zoomTags[i].num = this.zoomTags[i].tag.offset().top;
                    } else {
                        this.zoomTags[i].num = this.zoomTags[i].tag.outerHeight();
                    }
                }
                this.zoomSet(this.zoomTags[i]);
            }
        },
        zoom: function zoom() {
            console.log('zoom');
            var _this = this;
            if (_this.zoomResize === null) {
                _this.zoomResize = $window.on('resize', function () {
                    _this.zoomSets();
                });
            }
            _this.zoomSets();
        },
        navSetPositionAnis: function navSetPositionAnis(num, time, callback) {
            if (IS_HIGH_PERFORMANCE) {
                TweenMax.to(this.$nav, time, {
                    top: num,
                    bottom: 'auto',
                    onComplete: callback || null
                });
            } else {
                this.$nav.css({
                    top: num,
                    bottom: 'auto'
                });
                callback;
            }
        },
        navSetPosition: function navSetPosition(scenesMain_realIndex) {
            var _this = this;
            if (scenesMain_realIndex < 1) {
                _this.navSetPositionAnis(_this.size.height - _this.navHeight, 0.6, function () {
                    _this.$nav.removeClass('nav-isTop');
                });
            } else {
                _this.navSetPositionAnis(0, 0.6, function () {
                    _this.$nav.addClass('nav-isTop');
                });
            }
        }
    };
    // 读取开始
    loader.start();
});
